SYMFONY

C'est un framework PHP (cadriciel), une boîte à outils logicielle. CRUD (Create / Read / Update / Delete) -> Symfony va nous permettre de faciliter le développement d'applis en PHP

 * logiciel libre créé en 2009 par Fabien Potencier 
 * v.5.2
 * c'est un ensemble de composants (components) dont le coeur s'appelle le kernel en anglais (noyau). On peut installer uniquement le kernel mais son fonctionnement sera limité. il faudra installer d'autres composants.

LES COMPOSANTS 
 - doctrine : gère la BDD / ORM (object relation manager) -> dans l'appli symfony on ne connaît que l'ORM
 - twig : va servir à faire des templates (gabarit) HTML
 - monolog : outil pour gérer les journaux de logiciels (historique, journaux d'utilisation)
 - API : sert à créer une architecture pour que le dev front puisse accéder à ses données

On peut utiliser chacun de ces composants séparemment 

COMPOSER
Ces composants sont installés avec un outil PHP -> Composer 
Composer s'utilise dans un terminal (il faut au préalable installer un terminal et composer)
Exemple, pour installer doctrine : 
////////////////// composer require doctrine //////////////
Tout programme qui respecte les conventions psr-4 peut être chargé avec composer

INSTALLATION SYMFONY
composer create-project symfony/website-skeleton nom_de_mon_projet


 **********************************************
                  ARCHITECTURE MVC 
**********************************************

Une facon d'écrire du code (Patron de conception, ou Pattern) en séparant 3 éléments  :
- Modèle (model) : L'ensemble du code qui va intéragir avec la BDD. 
- Vue (view) : Tout ce qui concerne le rendu visuel.
- Contrôleur (controller) : Il fera le lien entre le modèle et la vue (au moyen d'une route).

Intérêt :
1/ Façon d'organiser le code à plusieurs : (ex. Pour les Intégrateurs)
2/ Façon d'optimiser les performances : (ex. séparant le code qui requête la BDD du code qui fait le rendu visuel.)

D'autres architectures existent (ADR -> Action Domain Responder, DDD -> Domain Driven Design, etc.)

ANNOTATIONS
Symfony utilise des annotations pour définir des propriétés en plus du code.
/* Exemple de commentaire multiligne */
/** Exemple d'annotation */
Une annotation commence par @ et doit être importée avec un use...

Une route :
- Elle est légèrement différente d'une URL 
- Morceau d'URL à laquelle va correspondre une action dans notre application 
ex :
- /articles          : récupération de tous les articles
- /articles/new      : créer un article 
- /articles/1        : afficher l'article 1
- /articles/1/edit   : modifier l'article 1
- /articles/1/delete : supprimer l'article 1

Pour créer une route, il y a plusieurs façon, nous utiliserons d'abord 
1/ Installation : composer require annotations
2/ utiliser un commentaire miltiligne pour donner une @Route
3/debug avec php bin/console debug:router 
4/voir ArticlesController.php

Les répertoires :

- bin : fichiers exécutables, des outils pour nous simplifier la vie (console, phpunit etc.).
- config : contient les fichiers de configuration de symfony et de ses composents. 
- migrations : doctrine va versionner l'évolution de la structure de la bdd.
- public : c'est le dossier qu'il faudra rendre accessible par le serveur HTTP.
- src : c'est le code de notre application.
- templates : ce dossier contiendra des gabarits HTML.
- tests : c'est ici qu'on mets nos tests, qu'on test nos applications.
- translations : traduction. 
- var : dossier de fichiers temporaires de symfony : le cache et les journaux.
- vendor : pas lié à symfony mais à composer qui stock à cet endroit tous les fichiers.

Les fichiers :

- .env : un fichier de configuration pour notre environnement dans notre projet(connex. bdd).
- composer.json : c'est le fichier utile a composer pour paramétrer ce paquet.

Flex :
- Aucun rapport avec flex de CSS.
- Flex dans le sens de symfony flex est un logiciel qui sert à installer des composants.
- Les developpeurs écrivent des recettes qui expliquent comment s'installent les composants de symfony.

ENTITÉ
Une table sera représentée par une classe dans Symfony. 
Les propriétés vont représenter les champs de la table.
Seules les propriétés qui auront été marquées par des annotations seront converties dans la BDD en champs.
Pour créer la table, il faut lancer la console : 
php bin/console doctrine:schema:update --force 
(déconseillé car pas de migration. Requête pour faire une migration: php bin/console make:migration)
Pour générer plus facilement les entités, on peut utiliser :
php bin/console make:entity
 
Trois façons de créer une table :
1/ Version compliquée, on se prend la tête   
        * Créer une nouvelle classe dans entity et l'annoter avec @ORM\ENtity
        * Dans cette classe on créera nos intitulés de colonnes que l'on définiera grâce aux annotations
        * On fait un getter pour l'id et un getter et un setter pour les autres intitulés de colonnes 
        * Aller dans la console et taper `php bin/console doctrine:schema:update --force`

2/ version moins compliquée mais pas propre quand même
        * dans la console on met : ` php bin/console make:entity`
        * la console nous propose de créer les colonnes et de leur donner une valeur (pas besoin de l'index / ajouter automatiquement)
        * on vérifie ce qu'il y a dans notre page qui a été créée 
        * Aller dans la console et taper `php bin/console doctrine:schema:update --force`

3/ version moins compliquée et propre
        * dans la console on met : ` php bin/console make:entity`
        * la console nous propose de créer les colonnes et de leur donner une valeur (pas besoin de l'index / ajouter automatiquement)
        * on vérifie ce qu'il y a dans notre page qui a été créée 
        * Aller dans la console et taper `php bin/console make:migration`
        * Vérifier la classe créée
        * Lancer dans la console : `php bin/console doctrine:migrations:migrate` ou pour les feignasses : `php bin/console d:m:m`

REPOSITORY
À côté de l'entité est créé un repository qui servira à contenir les fonctions de recherche dans la base de données.

INJECTION DE DÉPENDANCES (Dependency injection)
Lorsque l'on travaille dans le contrôleur on aura besoin de nombreux outils externes : l'outil de recherche en BDD (repository), un outil d'envoi de mail (mailer), un pour chiffrer un mot de passe, etc.
Dans Symfony on accède facilement à ces instances grâce à l'injection de dépendances; il suffit d'écrire le type et un nom de variable dans la méthode. Si Symfony connait ce type il l'instanciera et le fournira. (cf. ArticlesController.php, paramètres méthode index()).
Quand Symfony met en relation nos fonctions et ses dépendances on parle d'autowiring.

La liste complète des dépendances utilisables :
`php bin/console debug:autowiring`
